<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="20feece5-5989-4b22-b912-2b3c8a76418c" name="Changes" comment="Enhance Scanner to support string literals, numbers, and identifiers.&#10;&#10;- Added a static `keywords` map to store reserved keywords and their corresponding token types.&#10;- Enhanced `scanToken()` to recognize string literals, numeric literals, and identifiers.&#10;- Implemented `string()` method to handle string literal tokens, including error reporting for unterminated strings.&#10;- Implemented `number()` method to tokenize numeric literals, supporting both integers and floating-point numbers.&#10;- Implemented `identifier()` method to handle identifiers and keywords, utilizing the `keywords` map for keyword recognition.&#10;- Added utility methods `isDigit()`, `isAlpha()`, and `isAlphaNumeric()` for character type checks.&#10;- Improved multi-character operator detection by fixing the match for `GREATER` token.">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/lox/Lox.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/lox/Lox.java" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Enum" />
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;Gegcuk&quot;
  }
}</component>
  <component name="GithubPullRequestsUISettings">{
  &quot;selectedUrlAndAccountId&quot;: {
    &quot;url&quot;: &quot;git@github.com:Gegcuk/java-language-interpreter.git&quot;,
    &quot;accountId&quot;: &quot;7aa8f392-3dee-48c0-a04e-8a4264f222b6&quot;
  }
}</component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 6
}</component>
  <component name="ProjectId" id="2lCvFduoAb2OjPIkeFMkgOLh4zD" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;Application.Lox.executor&quot;: &quot;Run&quot;,
    &quot;Application.Main.executor&quot;: &quot;Run&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
    &quot;onboarding.tips.debug.path&quot;: &quot;C:/Users/HYPERPC/Documents/Programming/Java/Lox-Interpreter/Lox Interpteter/src/Main.java&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.updates&quot;
  }
}</component>
  <component name="RunManager" selected="Application.Lox">
    <configuration name="Lox" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="lox.Lox" />
      <module name="LoxInterpteter" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="lox.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="Main" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="Main" />
      <module name="LoxInterpteter" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Application.Lox" />
        <item itemvalue="Application.Main" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="20feece5-5989-4b22-b912-2b3c8a76418c" name="Changes" comment="" />
      <created>1724696772689</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1724696772689</updated>
    </task>
    <task id="LOCAL-00001" summary="Init commit">
      <option name="closed" value="true" />
      <created>1724697071200</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1724697071200</updated>
    </task>
    <task id="LOCAL-00002" summary="Initial commit: Setup basic structure of the Lox interpreter.&#10;&#10;- Created the `Lox` class in `lox/Lox.java`.&#10;- Implemented basic command-line interface with two modes: file execution and interactive prompt (REPL).&#10;- Added core methods:&#10;  - `runFile(String path)` to read and execute a file.&#10;  - `runPrompt()` for interactive execution.&#10;  - `run(String source)` to scan and print tokens.&#10;- Introduced basic error handling with `error(int line, String message)` and `report(int line, String where, String message)`.&#10;- Added `hadError` flag to manage error state and ensure proper exit codes.">
      <option name="closed" value="true" />
      <created>1725114280270</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1725114280270</updated>
    </task>
    <task id="LOCAL-00003" summary="Add token type definitions and token structure.&#10;&#10;- Created `TokenType.java` to define all possible types of tokens in the Lox language, including single-character tokens, multi-character tokens, literals, keywords, and EOF.&#10;- Added `Token.java` to encapsulate token data, including type, lexeme, literal value, and line number.&#10;- Implemented `toString()` method in `Token` class for easy representation of tokens during debugging and development.">
      <option name="closed" value="true" />
      <created>1725114938252</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1725114938252</updated>
    </task>
    <task id="LOCAL-00004" summary="Implement basic token scanning logic for single-character lexemes.&#10;&#10;- Created `Scanner.java` to handle the tokenization process of the Lox source code.&#10;- Implemented the `scanTokens()` method to loop through the source code, identifying lexemes and generating corresponding tokens.&#10;- Added fields `start`, `current`, and `line` to track the scanner's position in the source code.&#10;- Introduced `isAtEnd()` helper method to check if the scanner has reached the end of the source.&#10;- Implemented `scanToken()` to handle single-character tokens such as parentheses, braces, commas, and operators.&#10;- Added `advance()` and `addToken()` helper methods for consuming characters and generating tokens.&#10;- Implemented basic lexical error handling by reporting unexpected characters during scanning.">
      <option name="closed" value="true" />
      <created>1725125543221</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1725125543221</updated>
    </task>
    <task id="LOCAL-00005" summary="Enhance scanner to handle multi-character operators, comments, and whitespace.&#10;&#10;- Updated `scanToken()` method to support multi-character operators (`!=`, `==`, `&lt;=`, `&gt;=`).&#10;- Added support for single-line comments that start with `//`, ignoring characters until the end of the line.&#10;- Enhanced handling of whitespace and line breaks: space, carriage return, and tab characters are ignored, while newline characters increment the line count.&#10;- Introduced `match(char expected)` method to check for expected characters following the current one, used for detecting multi-character operators.&#10;- Added `peek()` method to look at the next character without consuming it, aiding in comment handling and future lexeme checks.&#10;- Improved error reporting for unexpected characters encountered during scanning.">
      <option name="closed" value="true" />
      <created>1725128994428</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1725128994428</updated>
    </task>
    <task id="LOCAL-00006" summary="Enhance Scanner to support string literals, numbers, and identifiers.&#10;&#10;- Added a static `keywords` map to store reserved keywords and their corresponding token types.&#10;- Enhanced `scanToken()` to recognize string literals, numeric literals, and identifiers.&#10;- Implemented `string()` method to handle string literal tokens, including error reporting for unterminated strings.&#10;- Implemented `number()` method to tokenize numeric literals, supporting both integers and floating-point numbers.&#10;- Implemented `identifier()` method to handle identifiers and keywords, utilizing the `keywords` map for keyword recognition.&#10;- Added utility methods `isDigit()`, `isAlpha()`, and `isAlphaNumeric()` for character type checks.&#10;- Improved multi-character operator detection by fixing the match for `GREATER` token.">
      <option name="closed" value="true" />
      <created>1725146394601</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1725146394601</updated>
    </task>
    <option name="localTasksCounter" value="7" />
    <servers />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Init commit" />
    <MESSAGE value="Initial commit: Setup basic structure of the Lox interpreter.&#10;&#10;- Created the `Lox` class in `lox/Lox.java`.&#10;- Implemented basic command-line interface with two modes: file execution and interactive prompt (REPL).&#10;- Added core methods:&#10;  - `runFile(String path)` to read and execute a file.&#10;  - `runPrompt()` for interactive execution.&#10;  - `run(String source)` to scan and print tokens.&#10;- Introduced basic error handling with `error(int line, String message)` and `report(int line, String where, String message)`.&#10;- Added `hadError` flag to manage error state and ensure proper exit codes." />
    <MESSAGE value="Add token type definitions and token structure.&#10;&#10;- Created `TokenType.java` to define all possible types of tokens in the Lox language, including single-character tokens, multi-character tokens, literals, keywords, and EOF.&#10;- Added `Token.java` to encapsulate token data, including type, lexeme, literal value, and line number.&#10;- Implemented `toString()` method in `Token` class for easy representation of tokens during debugging and development." />
    <MESSAGE value="Implement basic token scanning logic for single-character lexemes.&#10;&#10;- Created `Scanner.java` to handle the tokenization process of the Lox source code.&#10;- Implemented the `scanTokens()` method to loop through the source code, identifying lexemes and generating corresponding tokens.&#10;- Added fields `start`, `current`, and `line` to track the scanner's position in the source code.&#10;- Introduced `isAtEnd()` helper method to check if the scanner has reached the end of the source.&#10;- Implemented `scanToken()` to handle single-character tokens such as parentheses, braces, commas, and operators.&#10;- Added `advance()` and `addToken()` helper methods for consuming characters and generating tokens.&#10;- Implemented basic lexical error handling by reporting unexpected characters during scanning." />
    <MESSAGE value="Enhance scanner to handle multi-character operators, comments, and whitespace.&#10;&#10;- Updated `scanToken()` method to support multi-character operators (`!=`, `==`, `&lt;=`, `&gt;=`).&#10;- Added support for single-line comments that start with `//`, ignoring characters until the end of the line.&#10;- Enhanced handling of whitespace and line breaks: space, carriage return, and tab characters are ignored, while newline characters increment the line count.&#10;- Introduced `match(char expected)` method to check for expected characters following the current one, used for detecting multi-character operators.&#10;- Added `peek()` method to look at the next character without consuming it, aiding in comment handling and future lexeme checks.&#10;- Improved error reporting for unexpected characters encountered during scanning." />
    <MESSAGE value="Enhance Scanner to support string literals, numbers, and identifiers.&#10;&#10;- Added a static `keywords` map to store reserved keywords and their corresponding token types.&#10;- Enhanced `scanToken()` to recognize string literals, numeric literals, and identifiers.&#10;- Implemented `string()` method to handle string literal tokens, including error reporting for unterminated strings.&#10;- Implemented `number()` method to tokenize numeric literals, supporting both integers and floating-point numbers.&#10;- Implemented `identifier()` method to handle identifiers and keywords, utilizing the `keywords` map for keyword recognition.&#10;- Added utility methods `isDigit()`, `isAlpha()`, and `isAlphaNumeric()` for character type checks.&#10;- Improved multi-character operator detection by fixing the match for `GREATER` token." />
    <option name="LAST_COMMIT_MESSAGE" value="Enhance Scanner to support string literals, numbers, and identifiers.&#10;&#10;- Added a static `keywords` map to store reserved keywords and their corresponding token types.&#10;- Enhanced `scanToken()` to recognize string literals, numeric literals, and identifiers.&#10;- Implemented `string()` method to handle string literal tokens, including error reporting for unterminated strings.&#10;- Implemented `number()` method to tokenize numeric literals, supporting both integers and floating-point numbers.&#10;- Implemented `identifier()` method to handle identifiers and keywords, utilizing the `keywords` map for keyword recognition.&#10;- Added utility methods `isDigit()`, `isAlpha()`, and `isAlphaNumeric()` for character type checks.&#10;- Improved multi-character operator detection by fixing the match for `GREATER` token." />
  </component>
</project>